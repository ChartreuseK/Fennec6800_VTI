 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 1 - 2023-05-28 03:21:40 AM


       1/       0 :                     ; Fennec 6800 VTI - Option ROM v0.1
       2/       0 :                     ; Provides a video terminal interface for the Fennec 6800 instead of 
       3/       0 :                     ; using a serial terminal hooked up to UART0 on the Fennec.
       4/       0 :                     ; Outputs over composite video or TTL video (mono but 15.7kHz)
       5/       0 :                     ;
       6/       0 :                     ; Input is provided via a parallel ASCII keyboard over a DIP14 socket
       7/       0 :                     ; or DA15 port, and processed through a 6820/6821/6520/6521 PIA
       8/       0 :                     ; 
       9/       0 :                     ; This ROM installs itself as the default console, while swapping
      10/       0 :                     ; the default AUX device to UART0 instead of UART1
      11/       0 :                     ;-----------------------------------------------------------------------
      12/       0 :                     	CPU 6800
      13/       0 :                     	
      14/       0 : =$8000               VTIBASE EQU $8000	; EXP6 left most jumper
      15/       0 :                     ; 9000 for EXP5, A000 for 4, B000 for 3, C000 for 2, D000 for 1
      16/       0 :                     
      17/       0 : =$8000               VIDRAM	EQU VTIBASE
      18/       0 : =$8800               ROMBASE EQU VTIBASE+$800	; Upper 2kB of EXP6
      19/       0 :                     ; 6845 VDP ports
      20/       0 : =$87F8               CRTADDR	EQU VTIBASE+$7F8	; Lowest mirror
      21/       0 : =$87F9               CRTDATA	EQU VTIBASE+$7F9
      22/       0 :                     ; 6820 PIA ports
      23/       0 : =$8FF8               PIABASE EQU VTIBASE+$FF8	; Lowest mirror
      24/       0 : =$8FF8               PIAORA	EQU PIABASE+0		; ORA/INA/DDRA
      25/       0 : =$8FF9               PIACRA	EQU PIABASE+1
      26/       0 : =$8FFA               PIAORB	EQU PIABASE+2		; ORB/INB/DDRB
      27/       0 : =$8FFB               PIACRB	EQU PIABASE+3
      28/       0 :                     
      29/       0 :                     ; Peripherals on mainboard 
      30/       0 : =$EFF0               UART1	EQU $EFF0
      31/       0 : =$EFF2               UART2	EQU $EFF2
      32/       0 :                     
      33/       0 :                     ; Zero page VTI addresses
      34/       0 : =$40                 VTIVAR	EQU $0040		; Base for our addresses
      35/       0 : =$40                 SAVEX	EQU VTIVAR+0	; w Place to save word
      36/       0 : =$42                 SCRADDR	EQU VTIVAR+2	; w Screen address pointer
      37/       0 : =$44                 SCRX	EQU VTIVAR+4	; b Cursor X pos
      38/       0 : =$45                 SCRY	EQU VTIVAR+5	; b Cursor Y pos
      39/       0 :                     
      40/       0 :                     ;-----------------------------------------------------------------------
      41/       0 :                     ; Controllable routines in ROM
      42/       0 :                     ;  - expect no reg preserved, result if any in A
      43/       0 : =$C                  CONTR	EQU $000C	; Start of controllable routines
      44/       0 :                     
      45/       0 : =$C                  CONIN	EQU CONTR	; 3 - JMP to GETC routine for console
      46/       0 : =$F                  CONOUT	EQU CONIN+3	; 3 - JMP TO PUTC routine for console
      47/       0 : =$12                 CONINNB	EQU CONOUT+3	; 3 - JMP to GETC (non-blocking) for console
      48/       0 :                     
      49/       0 : =$15                 AUXIN	EQU CONINNB+3	; 3 - JMP to GETC routine for aux 
      50/       0 : =$18                 AUXOUT	EQU AUXIN+3	; 3 - JMP TO PUTC routine for aux 
      51/       0 : =$1B                 AUXINNB	EQU AUXOUT+3	; 3 - JMP to GETC (non-blocking) for aux
      52/       0 :                     
      53/       0 : =$1E                 DEVIN	EQU AUXINNB+3	; 3 - JMP to device routine GETC
      54/       0 : =$21                 DEVOUT	EQU DEVIN+3	; 3 - JMP to device routine PUTC
      55/       0 : =$24                 DEVINNB	EQU DEVOUT+3	; 3 - JMP to device routine GETC (non-blocking)
      56/       0 :                     			;  Device routines take device # in B
      57/       0 :                     			;  0 = console, 1 = uart a, 2 = uart b, 
      58/       0 :                     			;  3+ rom or user defined
      59/       0 : =$27                 CONTRE	EQU DEVINNB+3	; End of controllable routines
      60/       0 :                     ;-----------------------------------------------------------------------
 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 2 - 2023-05-28 03:21:40 AM


      61/       0 :                     
      62/    8800 :                     	ORG ROMBASE
      63/    8800 : F1 0F               	DW $F10F	; Flo(o)f signature for a bootable ROM
      64/    8802 : 56 54 49 52 4F 4D   	DB "VTIROM 0.1"	; 10 character name
             8808 : 20 30 2E 31       
      65/    880C : 00                  	DB 0		; Null terminator
      66/    880D :                     	; 3 bytes reserved for future use
      67/    8810 :                     	ORG ROMBASE+16	; Entry point at 16 bytes in
      68/    8810 :                     START
      69/    8810 : 7E 88 2B            	JMP ENTER	; Jump over function table
      70/    8813 :                     FTABLE	; Table of functions with a static address for user programs
      71/    8813 : 7E 88 4C            	JMP INITVDP	; Reset VDP
      72/    8816 : 7E 88 4F            	JMP LOADVDP	; Load VDP registers with custom table
      73/    8819 : 7E 88 F8            	JMP CLRSCR
      74/    881C : 7E 88 E9            	JMP SCROLL
      75/    881F : 7E 89 09            	JMP HOME
      76/    8822 : 7E 88 6F            	JMP GETC
      77/    8825 : 7E 88 7A            	JMP GETCNB
      78/    8828 : 7E 88 88            	JMP PUTC
      79/    882B :                     	
      80/    882B :                     ENTER
      81/    882B :                     	; We can assume a usable stack from the monitor
      82/    882B : BD 88 4C            	JSR INITVDP		
      83/    882E : BD 88 3B            	JSR INITKBD
      84/    8831 : BD 88 F8            	JSR CLRSCR
      85/    8834 : BD 89 09            	JSR HOME
      86/    8837 : BD 88 5F            	JSR INSTALL
      87/    883A : 39                  	RTS		; Return to monitor
      88/    883B :                     	;---------------------------------------------------------------
      89/    883B :                     
      90/    883B :                     INITKBD
      91/    883B : 86 00               	LDAA #00	; Select DDR
      92/    883D : B7 8F F9            	STAA PIACRA
      93/    8840 : B7 8F F8            	STAA PIAORA	; All 8 pins on A input
      94/    8843 : 86 07               	LDAA #07	; Active high strobe,
      95/    8845 :                     			; IRQ enabled, 
      96/    8845 :                     			; output reg sel
      97/    8845 : B7 8F F9            	STAA PIACRA
      98/    8848 : B6 8F F8            	LDAA PIAORA	; Read from port to clear flag
      99/    884B : 39                  	RTS
     100/    884C :                     
     101/    884C :                     ; Copy VDP register table to VDP
     102/    884C :                     INITVDP
     103/    884C : CE 89 35            	LDX #CRTTAB
     104/    884F :                     LOADVDP			; (Call here to load with other X)
     105/    884F : 5F                  	CLRB
     106/    8850 : F7 87 F8            ILOOP	STAB CRTADDR	; B is current address
     107/    8853 : A6 00               	LDAA 0,X	; Value from table
     108/    8855 : B7 87 F9            	STAA CRTDATA
     109/    8858 : 08                  	INX
     110/    8859 : 5C                  	INCB
     111/    885A : C1 10               	CMPB #16	; 16 registers to fill
     112/    885C : 26 F2               	BNE ILOOP
     113/    885E : 39                  	RTS
     114/    885F :                     
     115/    885F :                     ; Install handlers into monitor
     116/    885F :                     INSTALL
     117/    885F : CE 88 6F            	LDX #GETC
     118/    8862 : DF 0D               	STX CONIN+1	; +1 to skip over JMP opcode
     119/    8864 : CE 88 88            	LDX #PUTC
 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 3 - 2023-05-28 03:21:40 AM


     120/    8867 : DF 10               	STX CONOUT+1
     121/    8869 : CE 88 7A            	LDX #GETCNB
     122/    886C : DF 13               	STX CONINNB+1
     123/    886E : 39                  	RTS
     124/    886F :                     
     125/    886F :                     ;-----------------------------------------------------------------------
     126/    886F :                     ; Get character from console
     127/    886F :                     ; TODO change to parallel keyboard
     128/    886F : 86 80               GETC    LDAA #$80	; Check for CA1 interrupt flag
     129/    8871 : B5 8F F9            .L	BITA PIACRA	
     130/    8874 : 27 FB               	BEQ .L		; Wait till we get the strobe
     131/    8876 : B6 8F F8            	LDAA PIAORA	; Read in the character and clear flag
     132/    8879 : 39                  	RTS
     133/    887A :                     	
     134/    887A :                     	
     135/    887A :                     ; Non-blocking GETC
     136/    887A : 86 00               GETCNB	LDAA #0		; 2 - Default return
     137/    887C : C6 01               	LDAB #$01	; 2 - 
     138/    887E : F5 EF F0            	BITB UART1	; 4 -
     139/    8881 : 27 03               	BEQ .E		; 4 -
     140/    8883 : B6 EF F1            	LDAA UART1+1	; 4 -
     141/    8886 : 4D                  .E	TST A		; 2 - Set flags based on A
     142/    8887 : 39                  	RTS		; 5 -
     143/    8888 :                     
     144/    8888 :                     ;-----------------------------------------------------------------------
     145/    8888 :                     ; Print character in A to the screen (preserve X)
     146/    8888 :                     PUTC
     147/    8888 : 36                  	PSHA
     148/    8889 : 37                  	PSHB
     149/    888A : DF 40               	STX SAVEX	; Preserve X register
     150/    888C : DE 42               	LDX SCRADDR	; Get screen pointer (assume up to date)
     151/    888E : 81 0D               	CMPA #'\r'	; Carriage return
     152/    8890 : 27 2F               	BEQ .CR
     153/    8892 : 81 0A               	CMPA #'\n'	; Newline
     154/    8894 : 27 31               	BEQ .NL
     155/    8896 : 81 08               	CMPA #'\b'	; Backspace
     156/    8898 : 27 3E               	BEQ .BS
     157/    889A : 81 09               	CMPA #'\t'	; (Horizontal) Tab
     158/    889C : 27 11               	BEQ .TAB
     159/    889E :                     	; Otherwise assume printable character
     160/    889E : A7 00               	STAA 0,X	; Store to the screen
     161/    88A0 : 7C 00 44            	INC SCRX	; Move to next character in line
     162/    88A3 : 96 44               	LDAA SCRX	; Check current X pos
     163/    88A5 : 81 40               	CMPA #64	; If past screen width?
     164/    88A7 : 26 38               	BNE .END	
     165/    88A9 : 86 00               	LDAA #0		; Hit width of screen, go to next line
     166/    88AB : 97 44               	STAA SCRX	; Return to 0 	JMP S0OUT
     167/    88AD : 20 18               	BRA .NL		; Insert newline
     168/    88AF : 96 44               .TAB	LDAA SCRX	; 
     169/    88B1 : 8B 08               	ADDA #8		; Add 8 to force going to next tabstop
     170/    88B3 : 84 F8               	ANDA #$F8	; Round down to the next multiple of 8
     171/    88B5 : 97 44               	STAA SCRX	
     172/    88B7 : 81 40               	CMPA #64	; IfJSR GETDISP past screen width?
     173/    88B9 : 26 26               	BNE .END
     174/    88BB : 86 00               	LDAA #0		; Hit width of screen? go to next line
     175/    88BD : 97 44               	STAA SCRX	; Return to 0
     176/    88BF : 20 06               	BRA .NL		; Newline
     177/    88C1 : 86 00               .CR	LDAA #0		; Simply return to start of line
     178/    88C3 : 97 44               	STAA SCRX	; Set X pos to 0
     179/    88C5 : 20 1A               	BRA .END
 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 4 - 2023-05-28 03:21:40 AM


     180/    88C7 : 7C 00 45            .NL	INC SCRY	; Try and go to the next line
     181/    88CA : 96 45               	LDAA SCRY	
     182/    88CC : 81 18               	CMPA #24	; If past screen height?
     183/    88CE : 26 11               	BNE .END	
     184/    88D0 : 7A 00 45            	DEC SCRY	; Return back to last line of screen
     185/    88D3 : BD 88 E9            	JSR SCROLL	; Scroll the screen up one line
     186/    88D6 : 20 09               	BRA .END
     187/    88D8 : 96 44               .BS	LDAA SCRX	; Are we at the start of a line?
     188/    88DA : 27 05               	BEQ .END	; If so nothing to backspace
     189/    88DC : 7A 00 44            	DEC SCRX	; Otherwise move back one pos
     190/    88DF : 20 00               	BRA .END
     191/    88E1 : BD 89 12            .END	JSR GETDISP	; Recalculate DISP pointer
     192/    88E4 : DE 40               	LDX SAVEX	; Restore X
     193/    88E6 : 33                  	PULB
     194/    88E7 : 32                  	PULA
     195/    88E8 : 39                  	RTS
     196/    88E9 :                     
     197/    88E9 :                     ;-----------------------------------------------------------------------
     198/    88E9 :                     ; Scroll screen one line
     199/    88E9 :                     SCROLL
     200/    88E9 : CE 80 00            	LDX #VIDRAM
     201/    88EC : A6 40               .LOOP	LDAA 64,X	; Read from next line
     202/    88EE : A7 00               	STAA 0,X	; to current line
     203/    88F0 : 08                  	INX		; Go from top to bottom till we hit the end
     204/    88F1 : 8C 85 C0            	CPX #VIDRAM+(64*23)	; Start of last line of screen
     205/    88F4 : 26 F6               	BNE .LOOP
     206/    88F6 :                     	; Now clear last line
     207/    88F6 : 20 06               	BRA CLREND
     208/    88F8 :                     ;-----------------------------------------------------------------------
     209/    88F8 :                     ; Clear screen (fill with spaces)
     210/    88F8 :                     CLRSCR
     211/    88F8 : BD 89 09            	JSR HOME	; Home cursor
     212/    88FB : CE 80 00            	LDX #VIDRAM
     213/    88FE :                     CLREND	; Clear to end of screen starting at X
     214/    88FE : 86 20               	LDAA #' '	; Space to clear with
     215/    8900 : A7 00               .LOOP	STAA 0,X
     216/    8902 : 08                  	INX
     217/    8903 : 8C 86 00            	CPX #VIDRAM+(64*24)
     218/    8906 : 26 F8               	BNE .LOOP
     219/    8908 : 39                  	RTS
     220/    8909 :                     	
     221/    8909 :                     ;-----------------------------------------------------------------------
     222/    8909 :                     ; Home cursor (0,0)
     223/    8909 :                     HOME
     224/    8909 : 86 00               	LDAA #0
     225/    890B : 97 44               	STAA SCRX
     226/    890D : 97 45               	STAA SCRY
     227/    890F : 7E 89 12            	JMP GETDISP
     228/    8912 :                     
     229/    8912 :                     ;-----------------------------------------------------------------------
     230/    8912 :                     ; Convert SCRX, SCRY to screen memory address in SCRADDR
     231/    8912 :                     GETDISP
     232/    8912 : 96 45               	LDAA SCRY
     233/    8914 : 46                  	RORA		; Low 2 bits to upper 2 bits of addr 
     234/    8915 : 46                  	RORA		; 3x because ROR goes through carry
     235/    8916 : 46                  	RORA
     236/    8917 : 84 C0               	ANDA #$C0	; Low 2 bits of addr in upper 2
     237/    8919 : 9A 44               	ORAA SCRX	; Or in x position (6-bits = 64)
     238/    891B : 97 43               	STAA SCRADDR+1	; Low byte of screen address
     239/    891D : C6 0F               	LDAB #15	; Cursor position register (low byte) in VDP
 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 5 - 2023-05-28 03:21:40 AM


     240/    891F : F7 87 F8            	STAB CRTADDR	
     241/    8922 : B7 87 F9            	STAA CRTDATA	; Set VDP cursor
     242/    8925 : 96 45               	LDAA SCRY	; Now get remaining 3 bits of Y addr
     243/    8927 : 44                  	LSRA		
     244/    8928 : 44                  	LSRA		
     245/    8929 : 5A                  	DECB		; high byte cursor position register
     246/    892A : F7 87 F8            	STAB CRTADDR
     247/    892D : B7 87 F9            	STAA CRTDATA	; Set VDP cursor (high)
     248/    8930 : 8A 80               	ORAA #(VIDRAM>>8)	; VIDRAM base addr
     249/    8932 : 97 42               	STAA SCRADDR	; Upper byte of pointer to screen complete
     250/    8934 : 39                  	RTS
     251/    8935 :                     
     252/    8935 :                     
     253/    8935 :                     ;-----------------------------------------------------------------------
     254/    8935 :                     ; 12MHz dot clock
     255/    8935 :                     ; "NTSC" (B&W) single field progressive "mode"
     256/    8935 :                     ; 15,720Hz horizontal (approx)
     257/    8935 :                     ; 60Hz vertical refresh
     258/    8935 :                     ; 8x8 font
     259/    8935 :                     ; 64x24
     260/    8935 :                     ; 
     261/    8935 :                     ; H-total 95 chars (15,789Hz horizontal)
     262/    8935 :                     ; H-displayed 64 chars = 42.6us                              51.2 ideal
     263/    8935 :                     ; H-sync pos = 64chars + 8 +  1.5us =~ 82 chars 1.33us front  1.5 ideal
     264/    8935 :                     ; H-sync width = 4.7us =~ 7 chars = 4.666us sync              4.7 ideal
     265/    8935 :                     ; Back porch of 95 chars - 89 chars = 6 chars + 8 = 4us       6.2 ideal
     266/    8935 :                     ;-----------------------------------------------------------------------
     267/    8935 :                     ; 1 character (8 pixels) = 666ns
     268/    8935 :                     ;-----------------------------------------------------------------------
     269/    8935 :                     ; V-total lines 262 (262.5 but sssh) 
     270/    8935 :                     ; Characters are 8 lines high
     271/    8935 :                     ; VTotal = 32.75 -> 31 (subtract one and lose fraction)
     272/    8935 :                     ; VAdjust = 0.75 * 8 = 6 scanlines
     273/    8935 :                     ; VDisplayed = 24 (visible rows)  (Up to 28/29 works)
     274/    8935 :                     ; VSyncPos = 30
     275/    8935 :                     ; Non interlaced
     276/    8935 :                     ; 8 scalines per char (-1 = 7)
     277/    8935 :                     ; Cursor start at 0, blink at 1/32 field rate (5&6 set)
     278/    8935 :                     CRTTAB
     279/    8935 : 5F 40               	DB	95, 64		; R0/R1 H-Total and H-displayed
     280/    8937 : 4C 07               	DB	76, 7		; R2/R3 HSync Pos and HSync Width
     281/    8939 : 1F 06               	DB	31, 6		; R4/R5 VTotal and VTotal Adjust
     282/    893B : 18 1B               	DB	24, 27		; R6/R7 VDisplayed and VSync Pos
     283/    893D : 00 07               	DB	$00, 7		; R8/R9 Interlace and Max Scan Line
     284/    893F : 66 07               	DB	$66, 7		; R10/R11 Cursor start & end
     285/    8941 : 00 00               	DW	$0000		; R12/13 Start address
     286/    8943 : 00 00               	DW	$0000		; R14/15 Cursor address
     287/    8945 :                     	
     288/    8FFF :                     	ORG ROMBASE+$7FF
     289/    8FFF : FF                  	DB	$FF
     290/    9000 :                     
     291/    9000 :                     	END
 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 6 - 2023-05-28 03:21:40 AM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 AUXIN :                         15 - |  AUXINNB :                       1B - |
 AUXOUT :                        18 - | *CASESENSITIVE :                  0 - |
 CLREND :                      88FE C |  CLREND.LOOP :                 8900 C |
 CLRSCR :                      88F8 C | *COMPMODE :                       0 - |
 CONIN :                          C - |  CONINNB :                       12 - |
 CONOUT :                         F - | *CONSTPI :        3.141592653589793 - |
 CONTR :                          C - | *CONTRE :                        27 - |
 CRTADDR :                     87F8 - |  CRTDATA :                     87F9 - |
 CRTTAB :                      8935 C | *DATE :                "2023-05-28" - |
 DEVIN :                         1E - |  DEVINNB :                       24 - |
 DEVOUT :                        21 - |  ENTER :                       882B C |
*FALSE :                          0 - | *FTABLE :                      8813 C |
*FULLPMMU :                       1 - |  GETC :                        886F C |
 GETC.L :                      8871 C |  GETCNB :                      887A C |
 GETCNB.E :                    8886 C |  GETDISP :                     8912 C |
*HAS64 :                          1 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HOME :                        8909 C |
 ILOOP :                       8850 C |  INITKBD :                     883B C |
 INITVDP :                     884C C |  INSTALL :                     885F C |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
 LOADVDP :                     884F C | *MACEXP :                         7 - |
*MOMCPU :                      6800 - | *MOMCPUNAME :                "6800" - |
*NESTMAX :                      100 - | *PADDING :                        0 - |
 PIABASE :                     8FF8 - |  PIACRA :                      8FF9 - |
*PIACRB :                      8FFB - |  PIAORA :                      8FF8 - |
*PIAORB :                      8FFA - |  PUTC :                        8888 C |
 PUTC.BS :                     88D8 C |  PUTC.CR :                     88C1 C |
 PUTC.END :                    88E1 C |  PUTC.NL :                     88C7 C |
 PUTC.TAB :                    88AF C | *RELAXED :                        0 - |
 ROMBASE :                     8800 - |  SAVEX :                         40 - |
 SCRADDR :                       42 - |  SCROLL :                      88E9 C |
 SCROLL.LOOP :                 88EC C |  SCRX :                          44 - |
 SCRY :                          45 - | *START :                       8810 C |
*TIME :               "03:21:40 AM" - | *TRUE :                           1 - |
 UART1 :                       EFF0 - | *UART2 :                       EFF2 - |
*VERSION :                     142F - |  VIDRAM :                      8000 - |
 VTIBASE :                     8000 - |  VTIVAR :                        40 - |

     75 symbols
     27 unused symbols

 AS V1.42 Beta [Bld 231] - Source File vtirom.asm - Page 7 - 2023-05-28 03:21:40 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.00 seconds assembly time

    292 lines source file
      2 passes
      0 errors
      0 warnings
